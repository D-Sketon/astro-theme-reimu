---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post, index) => ({
    params: { slug: post.slug },
    props: {
      post,
      prev: posts[index - 1] || null,
      next: posts[index + 1] || null,
    },
  }));
}
type Props = {
  post: CollectionEntry<"blog">;
  prev: CollectionEntry<"blog"> | null;
  next: CollectionEntry<"blog"> | null;
};

const { post, prev, next } = Astro.props;
const { Content } = await post.render();
---

<BlogLayout post={post.data} nav={{ prev, next }} url={`/blog/${post.slug}`}>
  <Content />
</BlogLayout>

<script>
  import baguetteBox from "baguettebox.js";
  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll(".article-entry").forEach(function (article, i) {
      article.querySelectorAll("img").forEach(function (img) {
        if (img.parentElement?.tagName.toLowerCase() === "a") {
          return;
        }
        const alt = img.alt;
        const anchor = document.createElement("a");
        anchor.href = img.src;
        anchor.setAttribute("data-caption", alt || "");
        img.parentNode && img.parentNode.replaceChild(anchor, img);
        anchor.appendChild(img);
      });
    });
    baguetteBox.run(".article-entry");
  });
</script>

<script>
  import mermaid from "mermaid";

  const saveOriginalData = () => {
    return new Promise<void>((resolve, reject) => {
      try {
        const els = document.querySelectorAll(".language-mermaid");
        let count = els.length;
        els.forEach((element) => {
          if (element.getAttribute("data-original-code") == null) {
            element.setAttribute("data-original-code", element.innerHTML);
          }
          count--;
          if (count == 0) {
            resolve();
          }
        });
      } catch (error) {
        reject(error);
      }
    });
  };

  const resetProcessed = () => {
    return new Promise<void>((resolve, reject) => {
      try {
        const els = document.querySelectorAll(".language-mermaid");
        let count = els.length;
        els.forEach((element) => {
          if (element.getAttribute("data-original-code") != null) {
            element.removeAttribute("data-processed");
            element.innerHTML =
              element.getAttribute("data-original-code") ?? "";
          }
          count--;
          if (count == 0) {
            resolve();
          }
        });
      } catch (error) {
        reject(error);
      }
    });
  };
  const loadMermaid = async (theme: string) => {
    mermaid.initialize({
      startOnLoad: false,
      theme,
    });
    await mermaid.run({
      querySelector: ".language-mermaid",
    });
  };
  const themeSetHandler = (e: any) => {
    let theme = e.detail.theme;
    if (e.detail.theme === "light") {
      theme = "default";
    } else if (e.detail.theme === "auto") {
      theme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "default";
    }
    saveOriginalData()
      .then(() => {
        resetProcessed();
      })
      .then(() => {
        loadMermaid(theme);
      })
      .catch(console.error);
  };
  const mermaidInit = () => {
    document.body.removeEventListener("theme-set", themeSetHandler);
    document.body.addEventListener("theme-set", themeSetHandler);

    let theme = localStorage.getItem("theme");
    if (theme === '"light"') {
      theme = "default";
    } else if (theme === '"auto"') {
      theme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "default";
    } else if (theme === '"dark"') {
      theme = "dark";
    } else {
      theme = "default";
    }
    if (theme === "dark" || theme === "default") {
      saveOriginalData()
        .then(() => {
          resetProcessed();
        })
        .then(() => {
          loadMermaid(theme);
        })
        .catch(console.error);
    }
  };
  document.addEventListener("astro:after-swap", mermaidInit);
  mermaidInit();
</script>
