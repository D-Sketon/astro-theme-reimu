---
import { getCollection, type CollectionEntry } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";

import { __ } from "../../../utils/i18n";
import Footer from "../../../components/Footer.astro";
import TagList from "../../../components/TagList.astro";
import ArchiveList from "../../../components/ArchiveList.astro";

export async function getStaticPaths({ paginate }: { paginate: Function }) {
  const posts = await getCollection("blog");
  const tagsMap: Map<string, CollectionEntry<"blog">[]> = new Map();
  posts.forEach((post) => {
    if (Array.isArray(post.data.tags)) {
      post.data.tags.forEach((tag) => {
        if (tagsMap.has(tag)) {
          tagsMap.get(tag)!.push(post);
        } else {
          tagsMap.set(tag, [post]);
        }
      });
    }
  });
  const tags = [...tagsMap.keys()];
  return [...tagsMap.entries()]
    .map((tagMap) => {
      tagMap[1].sort((a, b) => {
        return b.data.pubDate.getTime() - a.data.pubDate.getTime();
      });
      return tagMap;
    })
    .flatMap((tagMap) => {
      return paginate(tagMap[1], {
        params: { tag: tagMap[0] },
        props: { tags },
        pageSize: 5,
      });
    });
}

type Props = {
  page: {
    data: CollectionEntry<"blog">[];
    url: {
      prev: string;
      next: string;
    };
    currentPage: number;
    lastPage: number;
  };
  tags: string[];
};

const { page, tags } = Astro.props;
const { tag } = Astro.params;
---

<BaseLayout title={`${__("tag")}: ${tag}`}>
  <!-- Header -->
  <div slot="header">
    <a href=`/tags/${tag}` id="logo">
      <h1>{`${__("tag")}: ${tag}`}</h1>
    </a>
  </div>
  <!-- Content -->
  <div class="archives-outer-wrap" data-aos="fade-up">
    <TagList tags={[...tags]} />
    <ArchiveList page={page} type="archives" />
  </div>
  <!-- Footer -->
  <Footer slot="footer" />
</BaseLayout>

<style>
  #logo h1 {
    text-decoration: none;
    color: #fff;
    text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    font-size: 40px;
    font-weight: 700;
    line-height: 40px;
    letter-spacing: 2px;
    display: inline-block;
    width: 80%;
    transform: translateY(-20%);
    text-shadow: 0 0.2rem 0.3rem rgba(0, 0, 0, 0.5);

    @media screen and (max-width: 959px) {
      width: 90%;
      font-size: 35px;
    }

    @media screen and (min-width: 480px) and (max-width: 767px) {
      width: 95%;
      font-size: 30px;
    }

    @media screen and (max-width: 479px) {
      width: 100%;
      font-size: 30px;
    }
  }

  .archives-outer-wrap {
    background: var(--color-wrap);
    border-radius: 5px;
    padding: 15px 0;
  }
</style>
